{"version":3,"sources":["../../monsters-rolodex/src/logo.svg","../../monsters-rolodex/src/components/card/card.component.jsx","../../monsters-rolodex/src/components/card-list/card-list.component.jsx","../../monsters-rolodex/src/components/search-box/search-box.component.jsx","../../monsters-rolodex/src/App.js","../../monsters-rolodex/src/serviceWorker.js","../../monsters-rolodex/src/index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","onSearchChange","App","Component","constructor","super","this","state","searchField","bind","componentDidMount","fetch","then","response","json","users","setState","e","target","value","render","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"yQAAe,I,MCIR,MAAMA,EAAOC,GAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,U,MCLG,MAAMC,EAAWR,GACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAIN,GAClB,cAACL,EAAD,CAAuBK,QAASA,GAArBA,EAAQC,Q,MCLlB,MAAMM,EAAYX,GACvB,uBACEC,UAAU,aACVW,KAAK,SACLC,YAAY,kBACZC,SAAUd,EAAMe,iB,MCHpB,MAAMC,UAAYC,YAChBC,cACEC,QAEAC,KAAKC,MAAQ,CACXZ,SAAU,GACVa,YAAa,IAGfF,KAAKL,eAAiBK,KAAKL,eAAeQ,KAAKH,MAGnDI,oBACEC,MAAM,8CACLC,MAAKC,GACGA,EAASC,SACfF,MAAKG,GAAST,KAAKU,SAAS,CAAErB,SAAUoB,MAG7Cd,eAAegB,GACbX,KAAKU,SAAS,CAAER,YAAaS,EAAEC,OAAOC,QAGvCC,SAAU,MAAD,EAE0Bd,KAAKC,MAA/BZ,EAFA,EAEAA,SAAUa,EAFV,EAEUA,YACXa,EAAmB1B,EAAS2B,QAAOhC,GACzCA,EAAQE,KAAK+B,cAAcC,SAAShB,EAAYe,iBAI7C,OACA,sBAAKpC,UAAU,MAAf,UACE,kDACA,cAACU,EAAD,CAAWI,eAAgBK,KAAKL,iBAChC,cAACP,EAAD,CAAUC,SAAU0B,QAMbnB,QCnCKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,cAAC,EAAD,IAASW,SAASC,eAAe,W","file":"static/js/main.f0b2f596.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img\r\n      alt='monster'\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </div>\r\n);","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n  )","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = props => (\r\n  <input\r\n    className='search-box'\r\n    type='search'\r\n    placeholder='search monsters'\r\n    onChange={props.onSearchChange}\r\n  />\r\n);","import React, { Component } from 'react';\nimport logo from './logo.svg'\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    this.onSearchChange = this.onSearchChange.bind(this)\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => {\n    return response.json();\n  }).then(users => this.setState({ monsters: users }))\n}\n\nonSearchChange(e) {\n  this.setState({ searchField: e.target.value })\n}\n// \n render() {  \n\n  const { monsters, searchField } = this.state\n   const filteredMonsters = monsters.filter(monster => \n   monster.name.toLowerCase().includes(searchField.toLowerCase())\n   );\n\n\n      return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// serviceWorker.unregister();\n// "],"sourceRoot":""}